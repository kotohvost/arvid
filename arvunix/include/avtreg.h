/*
 * Открыт Владимиром Зарожевским, по исходнику arvid10.exe Ver. 3.46r4
 * и файлу arvidapi.h пробегавшим по эхе SU.HARDW.SUPPORT.ARVID
 *	Файл-описание интерфейса АрВид V0.01beta (Arvid API)
 *  Содержит:
 *	- символическое описание кодов завершения
 *	- описание используемых структур данных
 *
 * составлен для Arvid 1031
 */

/* Про железо */
/*
 * Описание констант и структур используемых в программах работы с Арвид-1000
 */
#define	SIZESTR100	 8			/* длина строки 100 K/s */
#define	SIZE100		256*SIZESTR100*2	/* размер кадра 100 K/s */

#define	SIZESTR200	 9			/* длина строки 200 K/s */
#define	SIZE200		284*SIZESTR200*2	/* размер кадра 200 K/s */

#define	SIZESTR325	13			/* длина строки 325 K/s */
/*#define	SIZE325		296*SIZESTR325*2 */	/* размер кадра 325 K/s */
#define	SIZE325		300*SIZESTR325*2	/* размер кадра 325 K/s */

#define SIZE1030	4096		/* размер кадра ОЗУ карты в словах */

/* Все порты используемые устройством 16-ти разрядные
 * ArvidPort	= 270h | 320h
 *
 * чтение/запись
 */
#define	AV30_RDINC(base)	((base) + 0)
#define	AV30_RD(base)		((base) + 2)
/*
 * для записи
 */
#define AV30_RK(base)		((base) + 4)
#define AV30_RA(base)		((base) + 6)
/*
 * для чтение
 */
#define	AV30_RS(base)		((base) + 4)
#define AV30_RS1(base)		((base) + 6)
#define AV30_NPORT		2*4	/* количество используемых портов */

/*
 * Ниже описывается _как_ записаны данные на ленте для АРВИДа 1010
 *
 * перед записью на ленту формируется блок из 1032 слов в следующем порядке:
 * ----------------------------------------------
 * |	первый сектор - [512-8] байт		|
 * ----------------------------------------------
 * |	второй сектор - [512-8] байт		|
 * ----------------------------------------------
 * |	третий сектор - [512-8] байт		|
 * ----------------------------------------------
 * |	четвертый сектор - [512-8] байт		|
 * ----------------------------------------------
 * |	8 байт - из первого сектора		|
 * ----------------------------------------------
 * |	8 байт - из второго сектора		|
 * ----------------------------------------------
 * |	8 байт - контрольная сумма этих 16 байт	| точнее Xor16
 * ----------------------------------------------
 * |	8 байт - из третьего сектора		|
 * ----------------------------------------------
 * |	8 байт - из чевертого сектора		|
 * ----------------------------------------------
 * |	8 байт - контрольная сумма		|
 * ----------------------------------------------
 */
/*
 * дальше идет структура TPB на ленте 24 байта
 */

/* общая структура на один кадр */

#define SizeD100	1032	/* данные в словах (SizeData 100 Kb/s) */

#define SizeK100	1056

/*
 * Итого мы получаем ровно 1056 слов в одном кадре. После этого
 * кадр кодируется XOR преобразованием из 24 -> 66. Получается
 * чуть меньше размера ОЗУ карты. Дело в том что нерекомендуется
 * использовать первую строку данных (для 1010 = 34 байта)
 * Это связанно с настройкой аппаратуры на ленту. 
 */

/*
 * это внутренние структуры
 */

enum controller {
	UNKNOWN	= 0,	/* unknown type, driver disabled */
	Av1010	= 1010,	/* 1010 - 100 Kb/s (180min = 1Gb) */
	Av1020	= 1020,	/* 1020 - 200 Kb/s (180min = 2Gb) */
	Av1030	= 1030,	/* 1030 - 200 Kb/s */
	Av1031	= 1031,	/* 1031 - 200 Kb/s, 32 Kw, (300 Kb/s with compression) */
	Av1051	= 1051,	/* 1051 - 325 Kb/s, 64 Kw, (180min = 3.3Gb) */
	Av1052	= 1052,	/* 1052 - 325 Kb/s, 256 Kw, -//--//- */
};

struct avt_info {		/* Driver Parameters Block */
/* Неизменяемые характеристики в процессе работы */
	enum controller arvid;	/* тип контроллера */
	unsigned short	port;			/* номер базового порта */
	unsigned short	irq;			/* прерывание */
	unsigned short	drq;			/* DMA канал */
	unsigned char	ver_major,
		ver_minor;		/* версия драйвера */
	unsigned short	maxrate;	/* макс. скорость передачи [100-200] Кбайт/cек */
#define	MAXRATE10	100	/* 100 Kb/s */
#define	MAXRATE20	200	/* 200 Kb/s */
#define	MAXRATE30	200	/* 200 Kb/s */
#define	MAXRATE50	325	/* 325 Kb/s */
	unsigned char	maxphase;	/* макс. величина параметра phase */
#define MAXPHASE10	3	/* для 1010 (0-3) */
#define MAXPHASE20	7	/* для 1020 (0-7) */
#define MAXPHASE30	15	/* для 103x (0-7 + A0-A7) */
#define MAXPHASE50	23	/* для 103x (0-7 + A0-A7 + B0-B7) */

/*	2. Блок режимов драйвера Арвид
 * определяет характеристики, которые могут изменяться для указанного Device
 */
/*     struct CDPB {           // Current Device Parameters Block */
	unsigned short	flags;		/* статус драйвера */
#define	VTCLOSE	0x0000		/* драйвер свободен */
#define	VTOPEN	0x0001		/* драйвер используется */
#define	VCRLOAD	0x0002		/* флаг загрузки VCR таблицы */
#define	VTBUSY	0x8000		/* драйвер работает */
	unsigned char	commands;	/* текущая команда */
	unsigned char	time_out;	/* время тайм-аута, секунд, т.е. время,
				   по истечении которого операция прекращается,
				   если на ленте не найдено никакой информации
				   (по умолчанию 13 секунд) ??? */
	unsigned short	rate;		/* скорость передачи [100-200] Кбайт/cек */
	unsigned char	phase;		/* текущая фаза приема */
#define DEFAULT_PHASE10	3
#define DEFAULT_PHASE20	3
#define DEFAULT_PHASE30 0
#define DEFAULT_PHASE50 1
	unsigned char	check_rec;	/* флаг контроля кольца в реж. Record */
/*	unsigned short	lp; */		/* флаг работы в режиме LongPlay
				   ( д.б. 0 ) reserved
				   и ваще должен быть в структуре видика */
	unsigned char	auto_phase;	/* флаг: текущая работа в режиме
				   автоподстройки фазы */
/* ONLY 1030 and above */
/* #define AUTOTUNON	0000100B */
/* #define AUTOTUNOFF	!AUTOTUNON */
/*	U8      compress_enable; // флаг: при записи данных в формате FORMAT_RSC
				 // сжатие разрешено
	U8      xor_enable;  //  разрешено формировать XOR блоки при записи
	U8      xor_block_size;   // кол-во кадров в XOR блоке при записи
	U8      xor_block_number; // кол-во блоков в XOR области при записи
	U32     reserv;     // reserv
*/
};
typedef	struct	avt_info avt_info_t;

/*
 *======================================================
 * пытаемся создать кольцевой буфер для чтения данных из
 * карты, это если мы не успеваем их отдавать, в конце
 * концов будет найден единственный для использования.
 *======================================================
 */
/* опаньки */
#if 0
#define	SIZEKADR	296 * 13	/* максимальное количество СЛОВ
					   данных в одном кадре 1052 */
struct buf_raw {
	struct buf_raw	*next;	/* указатель на следующий буфер */
	unsigned short	data[SIZEKADR];	/* данные из карты */
};
#else
#define SIZEBUFBYTE	8192
struct buf_raw {
	struct buf_raw	*next;
	unsigned char		data[SIZEBUFBYTE];
};
#endif

#define	NBUFRAW	20		/* количество буферов */

#define	SIZE_VCR	0x996	/* размер VCR таблицы */

struct	set_rw {
	unsigned int	rate;		/* скорость чтения: 100/200/325 */
#define	IORAW	0x0
#define	IODATA	0x1
#define	IOIRC	0x2
	unsigned char	mode;		/* RAW/IRC/DATA */
};
/* ioctl функции */
#define	VGET_INFO	_IOR('A',  1, struct avt_info)	/* читаем конфиг драйвера */
#define	VSET_READ	_IOW('A',  2, struct set_rw)	/* читаем данные */
#define	VSET_WRITE	_IOW('A',  3, struct set_rw)	/* пишем данные */
#define	VGET_PHASE	_IOR('A',  4, unsigned char)	/* читаем фазу чтения */
#define	VSET_PHASE	_IOW('A',  5, unsigned char)	/* установка фазы чтения */
